{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","statusType","search","filterReducer","query","status","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterQuery","filterStatus","filteredTodos","queryTodo","optionQuery","completed","title","toLowerCase","includes","length","filterTodo","className","map","id","onClick","TodoFilter","onChange","event","value","target","filterAction","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","href","email","name","App","result","todosAction","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.310d07a4.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = { type: 'STATUS/SET', payload: Status };\ntype SetQueryAction = { type: 'QUERY/SET', payload: string };\n\nconst setStatus = (statusType: Status):SetStatusAction => {\n  return { type: 'STATUS/SET', payload: statusType };\n};\n\nconst setQuery = (search: string):SetQueryAction => {\n  return { type: 'QUERY/SET', payload: search };\n};\n\ntype State = { query: string, status: string };\ntype Action = SetStatusAction | SetQueryAction;\n\nexport const actions = { setStatus, setQuery };\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'STATUS/SET':\n      return { ...state, status: action.payload };\n    case 'QUERY/SET':\n      return { ...state, query: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodosAction = { type: 'TODOS/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo []):TodosAction => {\n  return { type: 'TODOS/SET', payload: todos };\n};\n\ntype State = Todo[] | [];\ntype Action = TodosAction;\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'TODOS/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoList = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const filterQuery = useAppSelector(state => state.filter.query);\n  const filterStatus = useAppSelector(state => state.filter.status);\n\n  const cahngedSelectTodo = (value: Todo) => {\n    dispatch(actions.setTodo(value));\n  };\n\n  const filterTodo = (queryTodo: string, optionQuery: string) => {\n    switch (optionQuery) {\n      case 'active':\n        return todos.filter(todo => !todo.completed\n          && todo.title.toLowerCase().includes(queryTodo.toLowerCase()));\n\n      case 'completed':\n        return todos.filter(todo => todo.completed\n          && todo.title.toLowerCase().includes(queryTodo.toLowerCase()));\n\n      default:\n        if (filterQuery.length > 0) {\n          return todos.filter(\n            todo => todo.title.toLowerCase().includes(queryTodo.toLowerCase()),\n          );\n        }\n\n        return todos;\n    }\n  };\n\n  const filteredTodos = filterTodo(filterQuery, filterStatus);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={todo.completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => cahngedSelectTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={currentTodo === todo\n                    ? 'far fa-eye-slash'\n                    : 'far fa-eye'}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterAction } from '../../features/filter';\n\nexport const TodoFilter = () => {\n  const dispatch = useAppDispatch();\n  const filterQuery = useAppSelector(state => state.filter.query);\n\n  const changeQuery = (value: string) => {\n    dispatch(filterAction.setQuery(value));\n  };\n\n  const changeOption = (value: Status) => {\n    dispatch(filterAction.setStatus(value));\n  };\n\n  const clearQuery = () => {\n    dispatch(filterAction.setQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={event => changeOption(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterQuery}\n          onChange={event => changeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n\n          {filterQuery && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (todo !== null) {\n      getUser(todo.userId).then((res) => {\n        setUser(res);\n      });\n    }\n  }, []);\n\n  const closeModalTodo = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModalTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              { todo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todosAction } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  useEffect(() => {\n    getTodos().then((result) => {\n      dispatch(todosAction.setTodos(result));\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!(todos.length > 0)\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}